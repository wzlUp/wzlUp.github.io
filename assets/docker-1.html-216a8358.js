import{_ as s,p as n,q as e,s as a,Y as l}from"./framework-e1bed10d.js";const i={},t=a("div",{class:"custom-container tip"},[a("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[a("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[a("circle",{cx:"12",cy:"12",r:"9"}),a("path",{d:"M12 8h.01"}),a("path",{d:"M11 12h1v4h1"})])]),a("p",{class:"custom-container-title"},"文章简介"),a("p",null,"主机环境为centos，容器为docker，进行mysql数据库的快速搭建")],-1),c=l(`<h2 id="一、创建宿主机文件夹" tabindex="-1"><a class="header-anchor" href="#一、创建宿主机文件夹" aria-hidden="true">#</a> 一、创建宿主机文件夹</h2><p>在centos宿主机中，创建物理路径/mydata/mysql/data、log和conf三个文件夹</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /mydata/mysql/data

<span class="token builtin class-name">cd</span> /mydata/mysql/

<span class="token function">mkdir</span> log conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、直接执行下面这个命令-即可创建成功mysql服务" tabindex="-1"><a class="header-anchor" href="#二、直接执行下面这个命令-即可创建成功mysql服务" aria-hidden="true">#</a> 二、直接执行下面这个命令，即可创建成功mysql服务</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token parameter variable">--name</span> mysql <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /mydata/mysql/log:/var/log/mysql <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /mydata/mysql/data:/var/lib/mysql <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /mydata/mysql/conf:/etc/mysql/conf.d <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span>root321 <span class="token punctuation">\\</span>
<span class="token parameter variable">-d</span> mysql:5.7
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="custom-container details"><summary class="custom-container-title">参数解析</summary><p>-e MYSQL_ROOT_PASSWORD=root321，其中<code>【root321】</code>就是默认用户root的密码</p><p>-v 是文件挂载位置，<strong>冒号之前是Linux宿主机的物理位置</strong>，后面的则是映射docker容器的位置</p><p>-e 是设置mysql的账户密码</p><p>-d 是后台使用mysql:5.7版本，启动新的容器</p></details><h2 id="三、使用挂载文件位置修改mysql的配置" tabindex="-1"><a class="header-anchor" href="#三、使用挂载文件位置修改mysql的配置" aria-hidden="true">#</a> 三、使用挂载文件位置修改mysql的配置</h2><p>编辑/mydata/mysql/conf目录，新建my.cnf文件，那么就会在mysql容器的/etc/mysql路径下看到my.cnf文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>client<span class="token punctuation">]</span>
default-character-set<span class="token operator">=</span>utf8

<span class="token punctuation">[</span>mysql<span class="token punctuation">]</span>
default-character-set<span class="token operator">=</span>utf8

<span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>
<span class="token assign-left variable">init_connect</span><span class="token operator">=</span><span class="token string">&#39;SET collation_connection=utf8_unicode_ci&#39;</span>
<span class="token assign-left variable">init_connect</span><span class="token operator">=</span><span class="token string">&#39;SET NAMES utf8&#39;</span>

<span class="token comment">#character-set-server=utf8</span>
<span class="token comment">#collection-server=utf8_unicode_ci</span>
skip-character-set-client-handshake
skip-name-resolve
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、常用命令" tabindex="-1"><a class="header-anchor" href="#四、常用命令" aria-hidden="true">#</a> 四、常用命令</h2><h3 id="_1-容器类命令" tabindex="-1"><a class="header-anchor" href="#_1-容器类命令" aria-hidden="true">#</a> 1. 容器类命令</h3><ul><li>启动容器</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> start mysql<span class="token punctuation">(</span>名称<span class="token operator">|</span><span class="token function">id</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>停止容器</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> stop mysql<span class="token punctuation">(</span>名称<span class="token operator">|</span><span class="token function">id</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>查看运行中容器</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">ps</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>查看所有容器</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>删除容器</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">rm</span> mysql<span class="token punctuation">(</span>名称<span class="token operator">|</span><span class="token function">id</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-镜像类命令" tabindex="-1"><a class="header-anchor" href="#_2-镜像类命令" aria-hidden="true">#</a> 2. 镜像类命令</h3><ul><li>查看镜像</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> images
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>删除镜像</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> rmi <span class="token operator">&lt;</span>image id<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-其他类命令" tabindex="-1"><a class="header-anchor" href="#_3-其他类命令" aria-hidden="true">#</a> 3. 其他类命令</h3><ul><li>查看日志</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> logs mysql<span class="token punctuation">(</span>名称<span class="token operator">|</span><span class="token function">id</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>容器自动启动</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--restart</span><span class="token operator">=</span>always 容器id<span class="token operator">|</span>名称

<span class="token function">docker</span> update <span class="token parameter variable">--restart</span><span class="token operator">=</span>always 容器id<span class="token operator">|</span>名称
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>进入mysql容器</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> mysql /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,33),r=[t,c];function d(o,p){return n(),e("div",null,r)}const m=s(i,[["render",d],["__file","docker-1.html.vue"]]);export{m as default};
