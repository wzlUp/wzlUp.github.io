import{_ as e,p as s,q as n,s as a,Y as i}from"./framework-e1bed10d.js";const r={},t=a("div",{class:"custom-container tip"},[a("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[a("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[a("circle",{cx:"12",cy:"12",r:"9"}),a("path",{d:"M12 8h.01"}),a("path",{d:"M11 12h1v4h1"})])]),a("p",{class:"custom-container-title"},"文章简介"),a("p",null,"主机环境为centos，容器为docker，进行rabbitmq的快速搭建")],-1),l=i(`<h2 id="一、拉取镜像" tabindex="-1"><a class="header-anchor" href="#一、拉取镜像" aria-hidden="true">#</a> 一、拉取镜像</h2><ol><li>搜索 rabbit 的镜像列表</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> search rabbitMq
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://pic.smartasc.cn/blogPics/20230213164938.png" alt=""></p><ol start="2"><li>拉取 rabbit 的镜像</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull docker.io/rabbitmq:3.8-management
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://pic.smartasc.cn/blogPics/20230213165113.png" alt=""></p><p>我选择了 <code>STARS</code> 数最多的官方镜像，此处需要注意，默认rabbitmq镜像是 <code>不带web端</code> 管理插件的，所以指定了镜像tag为 <code>3.8-management</code> ，表示下载包含web管理插件版本镜像，其它Tag版本可以访问 <code>DockerHub</code> 查询</p><h2 id="二、创建rabbit容器" tabindex="-1"><a class="header-anchor" href="#二、创建rabbit容器" aria-hidden="true">#</a> 二、创建rabbit容器</h2><ol><li>使用docker images获取查看rabbitMQ镜像ID，我的是4b23cfb64730</li></ol><p><img src="http://pic.smartasc.cn/blogPics/20230213165338.png" alt=""></p><ol start="2"><li>执行命令创建 <code>rabbitMq</code> 容器</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--name</span> rabbitmq <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">15672</span>:15672 <span class="token parameter variable">-p</span> <span class="token number">5672</span>:5672 4b23cfb64730
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>关于其中的参数含义如下：</p><ul><li>--name 指定了容器名称</li><li>-d 指定容器以后台守护进程方式运行</li><li>-p 指定容器内部端口号与宿主机之间的映射，rabbitMq默认要使用 <code>15672</code> 为其web端界面访问时端口，<code>5672</code> 为数据通信端口</li></ul><p>命令执行完毕后，docker会使用ID为 4b23cfb64730的镜像创建容器，创建完成后返回容器ID为3ae75edc48e2416292db6bcae7b1054091cb....(太长省略)</p><p>执行下面命令可以查看正在运行的容器，我们能看到rabbitMq已经运行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">ps</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>指定映射文件目录</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> rabbitmqNew <span class="token parameter variable">-p</span> <span class="token number">5672</span>:5672 <span class="token parameter variable">-p</span> <span class="token number">15672</span>:15672 <span class="token parameter variable">-v</span> <span class="token variable"><span class="token variable">\`</span><span class="token builtin class-name">pwd</span><span class="token variable">\`</span></span>/data:/var/lib/rabbitmq <span class="token parameter variable">--hostname</span> myRabbit <span class="token parameter variable">-e</span> <span class="token assign-left variable">RABBITMQ_DEFAULT_VHOST</span><span class="token operator">=</span>my_vhost <span class="token parameter variable">-e</span> <span class="token assign-left variable">RABBITMQ_DEFAULT_USER</span><span class="token operator">=</span>root <span class="token parameter variable">-e</span> <span class="token assign-left variable">RABBITMQ_DEFAULT_PASS</span><span class="token operator">=</span><span class="token number">123456</span> 92c743b6c055
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4"><li>查看容器日志</li></ol><p>查看容器日志 使用 <code>docker logs -f</code> 容器ID命令可以查看容器日志，我们执行 <code>docker logs -f 3ae</code> 命令查看rabbitMq在启动过程中日志，3ae是容器ID的简写——容器ID太长，使用时其写前几位即可，或者 <code>直接使用容器名称</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> logs <span class="token parameter variable">-f</span> rabbitmq
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://pic.smartasc.cn/blogPics/20230213170144.png" alt=""></p><p>从日志可以看出，rabbitMq默认创建了 <code>guest</code> 用户，并且赋予 <code>administrator角色</code> 权限，同时服务监听 <code>5672</code> 端口TCP连接和<code>15672</code> 端口的HTTP连接，至此说明安装成功。</p><h2 id="三、访问rabbit页面" tabindex="-1"><a class="header-anchor" href="#三、访问rabbit页面" aria-hidden="true">#</a> 三、访问rabbit页面</h2><ol><li>访问web界面</li></ol><p>在浏览器 输入你的 <code>主机Ip:15672</code> 回车即可访问rabbitMq的Web端管理界面，默认用户名和密码都是 <code>guest</code>，如图出现如下界面代表已经成功了。</p><p><img src="http://pic.smartasc.cn/blogPics/20230213170347.png" alt=""></p><ol start="2"><li>新添加一个账户</li></ol><p>默认的guest 账户有访问限制，默认只能通过本地网络(如 localhost) 访问，远程网络访问受限，所以在使用时我们一般另外添加用户</p><p>例如我们添加一个 <code>root</code> 用户：</p><p>(1). 进入到rabbitMq容器内部</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-t</span> rabbitmq bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>(2). 添加用户，用户名为root,密码为123456</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl add_user root <span class="token number">123456</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>(3). 赋予root用户所有权限</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl set_permissions <span class="token parameter variable">-p</span> / root <span class="token string">&quot;.*&quot;</span> <span class="token string">&quot;.*&quot;</span> <span class="token string">&quot;.*&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>(4). 赋予root用户 <code>administrator</code> 角色</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl set_user_tags root administrator
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>(5). 查看所有用户</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl list_users
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><em><strong>执行 <code>exit</code> 命令，从容器内部退出即可，这时我们使用root账户登录web界面也是可以的。到此，rabbitMq的安装就结束了。</strong></em></p>`,43),c=[t,l];function o(d,p){return s(),n("div",null,c)}const m=e(r,[["render",o],["__file","docker-2.html.vue"]]);export{m as default};
