import{_ as s,p as a,q as t,s as n,Y as p}from"./framework-e1bed10d.js";const e={},o=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"功能描述"),n("p",null,"可以快速根据数组中对象的某个字段，进行大小排序，并返回一个新的数组")],-1),c=p(`<h2 id="逻辑代码" tabindex="-1"><a class="header-anchor" href="#逻辑代码" aria-hidden="true">#</a> 逻辑代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> resArr <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>Data    
<span class="token keyword">var</span> abc <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>resArr<span class="token punctuation">,</span> <span class="token string">&#39;v&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>abc<span class="token punctuation">)</span>

<span class="token function">compare</span> <span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> array<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> x <span class="token operator">=</span> a<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
    <span class="token keyword">var</span> y <span class="token operator">=</span> b<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">&gt;</span> y<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">&gt;</span> y<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">// 由大到小，降序</span>
    <span class="token comment">// return ((x &lt; y) ? -1 : ((x &lt; y) ? 1 : 0))    // 由小到大，升序</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),l=[o,c];function r(i,u){return a(),t("div",null,l)}const d=s(e,[["render",r],["__file","vue-1.html.vue"]]);export{d as default};
