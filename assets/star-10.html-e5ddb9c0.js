import{_ as s,p as a,q as n,Y as e}from"./framework-e1bed10d.js";const l={},i=e(`<blockquote><p>上一篇 【centos 使用 docker 方式安装 mysql】 笔记中，我们在三个虚拟机中使用 docker 方式新建了三个 mysql 容器服务，那么我们这篇文章来记录下，如何在这三台机器中设置 mysql 的主从复制功能。其中111 服务器作为主节点，112 和 113 两个服务器作为两个从节点，复制 111 服务器 mysql 的数据，进行同步。</p></blockquote><h2 id="章节一-安装篇" tabindex="-1"><a class="header-anchor" href="#章节一-安装篇" aria-hidden="true">#</a> 章节一：安装篇</h2><h3 id="一、设置主节点-111-服务器下mysql-的-my-cnf-文件" tabindex="-1"><a class="header-anchor" href="#一、设置主节点-111-服务器下mysql-的-my-cnf-文件" aria-hidden="true">#</a> 一、设置主节点 111 服务器下mysql 的 my.cnf 文件</h3><p>进入 mysql 的挂载目录 /mnt/mysql/config 文件夹，编辑 my.cnf 文件。vim /mnt/mysql/config/my.cnf，添加如下配置：</p><ul><li>其中 server-id=111 要保证唯一性，每个节点的该参数都要不同</li><li>binlog-do-db 参数，设置多个复制数据库时需要重复配置该参数，示例如下测代码块中所示</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 主从复制配置区</span>
<span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>
server-id<span class="token operator">=</span><span class="token number">111</span>             <span class="token comment"># 主服务器唯一ID</span>
log-bin<span class="token operator">=</span>mysql-bin         <span class="token comment"># 启用二进制日志</span>
binlog-ignore-db<span class="token operator">=</span>mysql    <span class="token comment"># 设置不要复制的数据库(可设置多个)</span>
binlog-ignore-db<span class="token operator">=</span>information_schema
binlog-do-db<span class="token operator">=</span>iotings-cloud   <span class="token comment"># 设置需要复制的数据库         </span>
binlog-do-db<span class="token operator">=</span>iotings-config  <span class="token comment"># 设置需要复制的数据库</span>
binlog-do-db<span class="token operator">=</span>iotings-seata   <span class="token comment"># 设置需要复制的数据库</span>
<span class="token assign-left variable">binlog_format</span><span class="token operator">=</span>STATEMENT   <span class="token comment"># 设置logbin格式</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二、设置两个从节点-112、113-服务器下mysql-的-my-cnf-文件" tabindex="-1"><a class="header-anchor" href="#二、设置两个从节点-112、113-服务器下mysql-的-my-cnf-文件" aria-hidden="true">#</a> 二、设置两个从节点 112、113 服务器下mysql 的 my.cnf 文件</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vim</span> /mnt/mysql/config/my.cnf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>分别编辑如下参数：</p><p>1、112服务器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 主从复制配置区</span>
<span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>
server-id<span class="token operator">=</span><span class="token number">112</span>         <span class="token comment">#从服务器唯一ID</span>
relay-log<span class="token operator">=</span>mysql-relay <span class="token comment">#启用中继日志</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、113服务器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 主从复制配置区</span>
<span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>
server-id<span class="token operator">=</span><span class="token number">113</span>         <span class="token comment">#从服务器唯一ID</span>
relay-log<span class="token operator">=</span>mysql-relay <span class="token comment">#启用中继日志</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="三、设置三个mysql服务的-auto-cnf-文件的-uuid-参数" tabindex="-1"><a class="header-anchor" href="#三、设置三个mysql服务的-auto-cnf-文件的-uuid-参数" aria-hidden="true">#</a> 三、设置三个mysql服务的 auto.cnf 文件的 uuid 参数</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vim</span> /mnt/mysql/data/auto.cnf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>除了 my.cnf 中的 server-id 不能重复外，auto.cnf 文件中的 uuid 参数也不能重复，因为112和113 虚拟机是根据 111 进行克隆的，所以后两个服务器的 mysql 容器的 uuid 参数是一样的，那么修改后两个 uuid 参数，注意，不要再新加字符串，只在原来 uuid 的基础之上修改某个字符串即可，否则 mysql 容器重启会失败，异常为 无法找到该 uuid 等信息</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vim</span> /mnt/mysql/data/auto.cnf
<span class="token punctuation">[</span>auto<span class="token punctuation">]</span>
server-uuid<span class="token operator">=</span>e777435b-b90d-11ed-90c2-0242ac110002    <span class="token comment"># 举例：修改0002为0003，不可新增字符串</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="四、设置-主节点-的-slave-访问权限" tabindex="-1"><a class="header-anchor" href="#四、设置-主节点-的-slave-访问权限" aria-hidden="true">#</a> 四、设置 主节点 的 slave 访问权限</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 进入 111服务器的主 mysql 容器内</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> mysql /bin/bash

<span class="token comment"># 开启 mysql 命令模式</span>
mysql <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-padmin123</span>

<span class="token comment"># 创建 slave 访问权限</span>
mysql<span class="token operator">&gt;</span> GRANT REPLICATION SLAVE ON *.* TO <span class="token string">&#39;slave&#39;</span>@<span class="token string">&#39;%&#39;</span> IDENTIFIED BY <span class="token string">&#39;admin123&#39;</span><span class="token punctuation">;</span>
Query OK, <span class="token number">0</span> rows affected, <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>

<span class="token comment"># 查看主 master 状态</span>
mysql<span class="token operator">&gt;</span> show master status<span class="token punctuation">;</span>
+------------------+----------+--------------+--------------------------+-------------------+
<span class="token operator">|</span> File             <span class="token operator">|</span> Position <span class="token operator">|</span> Binlog_Do_DB <span class="token operator">|</span> Binlog_Ignore_DB         <span class="token operator">|</span> Executed_Gtid_Set <span class="token operator">|</span>
+------------------+----------+--------------+--------------------------+-------------------+
<span class="token operator">|</span> mysql-bin.000001 <span class="token operator">|</span>      <span class="token number">438</span> <span class="token operator">|</span> nacos_db     <span class="token operator">|</span> mysql,information_schema <span class="token operator">|</span>                   <span class="token operator">|</span>
+------------------+----------+--------------+--------------------------+-------------------+
<span class="token number">1</span> row <span class="token keyword">in</span> <span class="token builtin class-name">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>

注：记住这里的 File 和 Position 两个参数，在从节点的配置中要用到
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="五、配置-从节点-的-mysql-属性" tabindex="-1"><a class="header-anchor" href="#五、配置-从节点-的-mysql-属性" aria-hidden="true">#</a> 五、配置 从节点 的 mysql 属性</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 分别进入 112、113服务器的主 mysql 容器内</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> mysql /bin/bash

<span class="token comment"># 开启 mysql 命令模式</span>
mysql <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-padmin123</span>

<span class="token comment"># 然后执行如下命令，创建复制的一些配置</span>
CHANGE MASTER TO <span class="token assign-left variable">MASTER_HOST</span><span class="token operator">=</span><span class="token string">&#39;192.168.0.111&#39;</span>,
<span class="token assign-left variable">MASTER_USER</span><span class="token operator">=</span><span class="token string">&#39;slave&#39;</span>,
<span class="token assign-left variable">MASTER_PASSWORD</span><span class="token operator">=</span><span class="token string">&#39;admin123&#39;</span>,
<span class="token assign-left variable">MASTER_PORT</span><span class="token operator">=</span><span class="token number">3306</span>,
<span class="token assign-left variable">MASTER_LOG_FILE</span><span class="token operator">=</span><span class="token string">&#39;mysql-bin.000002&#39;</span>,MASTER_LOG_POS<span class="token operator">=</span><span class="token number">438</span><span class="token punctuation">;</span>

<span class="token comment">#启动从服务器复制功能 </span>
start slave<span class="token punctuation">;</span> 

<span class="token comment">#查看从服务器状态 </span>
show slave status <span class="token punctuation">\\</span>G 

注意：如果需要停用slave，命令为：stop slave；

如果没有异常的话，那么主从复制就配置好了，在主节点进行表和数据的增删，那么从节点会根据日志信息进行数据的同步！
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://pic.smartasc.cn/blogPics/20230617221755.png" alt=""></p><h3 id="六、出现了从节点异常信息后-根据具体的异常进行具体的分析" tabindex="-1"><a class="header-anchor" href="#六、出现了从节点异常信息后-根据具体的异常进行具体的分析" aria-hidden="true">#</a> 六、出现了从节点异常信息后，根据具体的异常进行具体的分析</h3><p>（1）出现了 【Slave_SQL_Running: No】 的异常信息，那么我们来解决一下</p><p>方案一：（已亲测，可行）</p><p>1、先停掉 slave</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysql<span class="token operator">&gt;</span> stop slave<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2、跳过错误步数，后面步数可变</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysql<span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> global <span class="token assign-left variable">sql_slave_skip_counter</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3、再启动 slave</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysql<span class="token operator">&gt;</span> start slave<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>4、查看同步状态</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysql<span class="token operator">&gt;</span> show slave status<span class="token punctuation">\\</span>G
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>解决方法二：(重新做主从，完全同步，未亲测)</p><p>1、先进入主库进行锁表，注意窗口不要关闭</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysql<span class="token operator">&gt;</span> flush table with <span class="token builtin class-name">read</span> lock<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2、把数据进行备份</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> mysqldump <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p</span> <span class="token parameter variable">--opt</span> <span class="token parameter variable">-R</span> 数据库 <span class="token operator">&gt;</span> /data/bak.sql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3、再新开个窗口，查看主数据库信息</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysql<span class="token operator">&gt;</span> show master status<span class="token punctuation">;</span>
+------------------+----------+--------------+------------------+-------------------+
<span class="token operator">|</span> File <span class="token operator">|</span> Position <span class="token operator">|</span> Binlog_Do_DB <span class="token operator">|</span> Binlog_Ignore_DB <span class="token operator">|</span> Executed_Gtid_Set <span class="token operator">|</span>
+------------------+----------+--------------+------------------+-------------------+
<span class="token operator">|</span> mysql-bin.000005 <span class="token operator">|</span> <span class="token number">1158</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>
+------------------+----------+--------------+------------------+-------------------+
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4、在从库上停止slave</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysql<span class="token operator">&gt;</span> stop slave<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>5、导入备份的数据文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysql<span class="token operator">&gt;</span> <span class="token builtin class-name">source</span> /data/bak.sql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>6、重置同步</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysql<span class="token operator">&gt;</span> reset slave<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>7、重新设置同步节点</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysql<span class="token operator">&gt;</span> CHANGE MASTER TO
<span class="token assign-left variable">MASTER_HOST</span><span class="token operator">=</span><span class="token string">&#39;192.168.0.111&#39;</span>,
<span class="token assign-left variable">MASTER_PORT</span><span class="token operator">=</span><span class="token number">3306</span>,
<span class="token assign-left variable">MASTER_USER</span><span class="token operator">=</span><span class="token string">&#39;sync&#39;</span>,
<span class="token assign-left variable">MASTER_PASSWORD</span><span class="token operator">=</span><span class="token string">&#39;admin123&#39;</span>,
<span class="token assign-left variable">MASTER_LOG_FILE</span><span class="token operator">=</span><span class="token string">&#39;mysql-bin.000005&#39;</span>, <span class="token comment"># 按照具体的主节点信息写该配置</span>
<span class="token assign-left variable">MASTER_LOG_POS</span><span class="token operator">=</span><span class="token number">1158</span><span class="token punctuation">;</span>                <span class="token comment"># 按照具体的主节点信息写该配置</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注：host，port，user，password请根据你的主库设置相应修改，log_file和log_pos根据主库中master status相应修改。</p><p>8、开启slave</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysql<span class="token operator">&gt;</span> start slave<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>9、查看slave状态</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysql<span class="token operator">&gt;</span> show slave status<span class="token punctuation">\\</span>G<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>显示如下信息则表示正常</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Slave_IO_Running: Yes
Slave_SQL_Running: Yes
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>10、对主数据库解锁</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysql<span class="token operator">&gt;</span> unlock tables<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>（2）出现了 【Slave_IO_Running: No】 的异常信息，在各个从库中执行如下代码，可恢复（已亲测，可用）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>stop slave<span class="token punctuation">;</span>
reset slave<span class="token punctuation">;</span>
start slave<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>FAQ： 1、F：当看到数据没有同步时，而且查看从库没有任何异常，是怎么回事呢？ A：可能是没有配置该库进行同步，检查下设置同步的表</p><p>参考信息： https://www.cnblogs.com/NIAN2011/p/16637719.htmlhttps://cloud.tencent.com/developer/article/2145753 http://www.codebaoku.com/it-mysql/it-mysql-180748.html</p><h2 id="章节二-运维篇" tabindex="-1"><a class="header-anchor" href="#章节二-运维篇" aria-hidden="true">#</a> 章节二：运维篇</h2><h3 id="一、添加新的同步库" tabindex="-1"><a class="header-anchor" href="#一、添加新的同步库" aria-hidden="true">#</a> 一、添加新的同步库</h3><p>场景就是，在三个服务器正常的运行之下，需要新增一个需要同步的数据库，那么正常的流程是什么呢，如下：</p><ul><li>首先，在主库的服务器中，配置 my.cnf 文件，新增需要同步的数据库，此刻还不能新建库，重启 docker 中的 mysql 容器</li><li>然后，在主库中新建第一步配置的数据库</li><li>最后检查其他两个从库的同步状态</li><li>那么以后的新增表、添加表数据或者删除表、库的动作，三个库都会同步执行</li></ul>`,65),p=[i];function t(o,c){return a(),n("div",null,p)}const d=s(l,[["render",t],["__file","star-10.html.vue"]]);export{d as default};
